import React, { useState, useEffect, useContext } from "react";
import axios from "axios";
import { AppContext } from "@/components/context/UserContext";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { Document, Page } from 'react-pdf';

const ReadingMaterials = () => {
    const { token } = useContext(AppContext);
    const [materials, setMaterials] = useState([]);
    const [filter, setFilter] = useState("");
    const [pdf, setPdf] = useState('');

    useEffect(() => {
        const fetchMaterials = async () => {
            try {
                const response = await axios.get("http://localhost:3333/coursematerial/get", {
                    headers: {
                        Authorization: `Bearer ${token}`
                    }
                });
                setMaterials(response.data);
            } catch (error) {
                console.error("Error fetching materials:", error);
            }
        };

        fetchMaterials();
    }, [token]);

    const handleFilterChange = (e) => {
        setFilter(e.target.value);
    };

    const handleOpenMaterial = async (filename) => {
        try {
            const response = await axios.get(`http://localhost:3333/${filename}`, { responseType: 'blob' });
            setPdf(URL.createObjectURL(new Blob([response.data])));
        } catch (error) {
            console.error("Error opening material:", error);
            toast.error("Error opening material");
        }
    };

    const handleDownloadMaterial = async (filename) => {
        try {
            const response = await axios.get(`http://localhost:3333/coursematerial/download/${filename}`, {
                responseType: 'blob'
            });
            const url = window.URL.createObjectURL(new Blob([response.data]));
            const link = document.createElement('a');
            link.href = url;
            link.setAttribute('download', filename);
            document.body.appendChild(link);
            link.click();
        } catch (error) {
            console.error("Error downloading material:", error);
            toast.error("Error downloading material");
        }
    };

    return (
        <div className="w-full p-8 mt-8 text-center">
            <div className="w-full max-w-md">
                <input
                    type="text"
                    className="w-full p-3 border border-gray-300 rounded-md mb-4 block"
                    placeholder="Filter by keyword (e.g., description)"
                    value={filter}
                    onChange={handleFilterChange}
                />

                {materials.map((material) => (
                    <div key={material.id} className="flex justify-between items-center border border-gray-300 rounded-md p-3 mb-2">
                        <div>{material.description}</div>
                        <div>
                            <button className="text-blue-500 hover:underline mr-2" onClick={() => handleOpenMaterial(material.file)}>
                                Open
                            </button>
                            <button className="text-green-500 hover:underline" onClick={() => handleDownloadMaterial(material.file)}>
                                Download
                            </button>
                        </div>
                    </div>
                ))}
            </div>
            {pdf && (
                <div className="mt-4">
                    <Document file={pdf}>
                        <Page pageNumbers={pdf ? pdf.pageNumbers : []} />
                    </Document>
                </div>
            )}
            <ToastContainer position="bottom-right" />
        </div>
    );
};

export default ReadingMaterials;