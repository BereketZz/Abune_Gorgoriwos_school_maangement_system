// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator dbml {
  provider = "prisma-dbml-generator"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id Int @id @default(autoincrement())

  school_name    String
  school_address String
  school_phone   String

  createdAT    DateTime   @default(now())
  updatedAT    DateTime   @updatedAt
  schoolYearId Int
  schoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id])
  User         User[]

  @@index([id])
  @@map("schools")
}

model User {
  id            Int       @id @default(autoincrement())
  frist_name    String
  middle_name   String
  last_name     String
  username      String?
  email         String    @unique
  role          String
  address       String?
  phone         String
  password      String
  gender        String
  date_of_birth String
  loggedInAt    DateTime?

  createdAT DateTime @default(now())
  updatedAT DateTime @updatedAt

  school_Id Int
  school    School    @relation(fields: [school_Id], references: [id])
  Student   Student[]
  Teacher   Teacher[]

  @@index([id, email])
  @@map("users")
}

model Teacher {
  // id              Int    @id @default(autoincrement())
  education_level String

  user_Id    Int          @id
  user       User         @relation(fields: [user_Id], references: [id])
  result     Result[]
  subject    Subject[]
  gradelevel GradeLevel[]

  @@map("teachers")
}

model Student {
  // id              Int     @id @default(autoincrement())
  enrollment_date String
  careof_contact1 String
  careof_contact2 String?

  user_Id Int  @id
  user    User @relation(fields: [user_Id], references: [id])

  gradeId    Int
  gradelevel GradeLevel @relation(fields: [gradeId], references: [id])

  sectionId Int
  section   Section @relation(fields: [sectionId], references: [id])

  subject Subject[]
  result  Result[]

  @@map("students")
}

model GradeLevel {
  id      Int       @id @default(autoincrement())
  grade   String
  student Student[]
  subject Subject[]
  result  Result[]
  //Make the teacherId optional !
  teacher Teacher[]

  section Section[]

  // other fields specific to GradeLevel
}

model Section {
  id         Int        @id @default(autoincrement())
  name       String
  gradeId    Int
  gradelevel GradeLevel @relation(fields: [gradeId], references: [id])

  student Student[]
}

model Subject {
  id        Int       @id @default(autoincrement())
  name      String
  // other fields specific to Subject
  student   Student[]
  result    Result[]
  teacher   Teacher   @relation(fields: [teacherId], references: [user_Id])
  teacherId Int

  gradelevel GradeLevel[]
}

model Result {
  id              Int @id @default(autoincrement())
  assignmentScore Int
  midtermScore    Int
  finalExamScore  Int
  totalScore      Int

  studentId Int
  student   Student @relation(fields: [studentId], references: [user_Id])

  subjectId Int
  subject   Subject @relation(fields: [subjectId], references: [id])

  gradeLevelId Int
  gradeLevel   GradeLevel @relation(fields: [gradeLevelId], references: [id])

  teacherId Int
  teacher   Teacher @relation(fields: [teacherId], references: [user_Id])

  @@unique([subjectId, studentId])
  @@map("results")
}

model SchoolYear {
  id         Int    @id @default(autoincrement())
  name       String
  start_date String
  end_date   String

  term   Term[]
  school School[]
}

model Term {
  id           Int        @id @default(autoincrement())
  name         String
  start_date   String
  end_date     String
  schoolYearId Int
  schoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id])
}
