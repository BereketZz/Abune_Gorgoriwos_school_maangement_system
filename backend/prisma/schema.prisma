// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id Int @id @default(autoincrement())

  school_name    String
  school_address String
  school_phone   String

  createdAT DateTime @default(now())
  updatedAT DateTime @updatedAt

  User User[]

  @@index([id])
  @@map("schools")
}

model User {
  id          Int     @id @default(autoincrement())
  frist_name  String
  middle_name String
  last_name   String
  username    String?
  email       String  @unique
  role        String
  address     String?
  phone       String
  password    String

  createdAT DateTime @default(now())
  updatedAT DateTime @updatedAt

  school_Id Int
  school    School    @relation(fields: [school_Id], references: [id])
  Student   Student[]
  Teacher   Teacher[]

  @@index([id, email])
  @@map("users")
}

model Teacher {
  // id              Int    @id @default(autoincrement())
  education_level String

  user_Id Int @id
  user    User @relation(fields: [user_Id], references: [id])
   result Result[]
 subject Subject[]
 gradelevel GradeLevel[]

  @@map("teachers")
}

model Student {
  // id              Int     @id @default(autoincrement())
  enrollment_date String
  careof_contact1 String
  careof_contact2 String?

  user_Id Int @id
  user    User @relation(fields: [user_Id], references: [id])

  gradelevel     GradeLevel  @relation(fields: [gradeId], references: [id])
  gradeId   Int
  subject Subject[]
  result Result[]

  @@map("students")
}

model GradeLevel {
  id      Int      @id @default(autoincrement())
  grade   String
  section String
  student Student[]
  subject Subject[]
 result Result[]
  teacher    Teacher    @relation(fields: [teacherId], references: [ user_Id])   
   teacherId  Int 
  // other fields specific to GradeLevel
}

model Subject {
  id   Int    @id @default(autoincrement())
  name String
  // other fields specific to Subject
    student Student[]
     result Result[]
  teacher    Teacher    @relation(fields: [teacherId], references: [ user_Id])   
    teacherId  Int  

  gradelevel GradeLevel[]
}

model Result {
  id     Int @id @default(autoincrement())
  assignmentScore Int
  midtermScore Int
  finalExamScore Int
  totalScore Int

  studentId Int
  student   Student @relation(fields: [studentId], references: [user_Id])

  subjectId Int
  subject   Subject @relation(fields: [subjectId], references: [id])

  gradeLevelId Int
  gradeLevel   GradeLevel @relation(fields: [gradeLevelId], references: [id])

  teacherId Int
  teacher   Teacher @relation(fields: [teacherId], references: [user_Id])

  @@map("results")
}